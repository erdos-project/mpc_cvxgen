% Produced by CVXGEN, 2020-03-22 19:57:34 -0400.
% CVXGEN is Copyright (C) 2006-2017 Jacob Mattingley, jem@cvxgen.com.
% The code in this file is Copyright (C) 2006-2017 Jacob Mattingley.
% CVXGEN, or solvers produced by CVXGEN, cannot be used for commercial
% applications without prior written permission from Jacob Mattingley.

% Filename: cvxsolve.m.
% Description: Solution file, via cvx, for use with sample.m.
function [vars, status] = cvxsolve(params, settings)
A = params.A;
B = params.B;
C = params.C;
Q = params.Q;
Q_final = params.Q_final;
R = params.R;
R_diff = params.R_diff;
S = params.S;
u_max = params.u_max;
u_min = params.u_min;
x_0 = params.x_0;
x_max = params.x_max;
x_min = params.x_min;
if isfield(params, 'x_ref_1')
  x_ref_1 = params.x_ref_1;
elseif isfield(params, 'x_ref')
  x_ref_1 = params.x_ref{1};
else
  error 'could not find x_ref_1'
end
if isfield(params, 'x_ref_2')
  x_ref_2 = params.x_ref_2;
elseif isfield(params, 'x_ref')
  x_ref_2 = params.x_ref{2};
else
  error 'could not find x_ref_2'
end
if isfield(params, 'x_ref_3')
  x_ref_3 = params.x_ref_3;
elseif isfield(params, 'x_ref')
  x_ref_3 = params.x_ref{3};
else
  error 'could not find x_ref_3'
end
if isfield(params, 'x_ref_4')
  x_ref_4 = params.x_ref_4;
elseif isfield(params, 'x_ref')
  x_ref_4 = params.x_ref{4};
else
  error 'could not find x_ref_4'
end
if isfield(params, 'x_ref_5')
  x_ref_5 = params.x_ref_5;
elseif isfield(params, 'x_ref')
  x_ref_5 = params.x_ref{5};
else
  error 'could not find x_ref_5'
end
cvx_begin
  % Caution: automatically generated by cvxgen. May be incorrect.
  variable u_0(2, 1);
  variable x_1(4, 1);
  variable u_1(2, 1);
  variable x_2(4, 1);
  variable u_2(2, 1);
  variable x_3(4, 1);
  variable u_3(2, 1);
  variable x_4(4, 1);
  variable u_4(2, 1);
  variable x_5(4, 1);

  minimize(quad_form(u_0, R) + quad_form(x_1 - x_ref_1, Q) + quad_form(u_1, R) + quad_form(x_2 - x_ref_2, Q) + quad_form(u_2, R) + quad_form(x_3 - x_ref_3, Q) + quad_form(u_3, R) + quad_form(x_4 - x_ref_4, Q) + quad_form(u_4, R) + quad_form(x_5 - x_ref_5, Q_final) + quad_form(u_1 - u_0, R_diff) + quad_form(u_2 - u_1, R_diff) + quad_form(u_3 - u_2, R_diff) + quad_form(u_4 - u_3, R_diff));
  subject to
    x_1 == A*x_0 + B*u_0 + C;
    x_2 == A*x_1 + B*u_1 + C;
    x_3 == A*x_2 + B*u_2 + C;
    x_4 == A*x_3 + B*u_3 + C;
    x_5 == A*x_4 + B*u_4 + C;
    x_min <= x_1;
    x_min <= x_2;
    x_min <= x_3;
    x_min <= x_4;
    x_min <= x_5;
    x_1 <= x_max;
    x_2 <= x_max;
    x_3 <= x_max;
    x_4 <= x_max;
    x_5 <= x_max;
    u_min <= u_0;
    u_min <= u_1;
    u_min <= u_2;
    u_min <= u_3;
    u_min <= u_4;
    u_0 <= u_max;
    u_1 <= u_max;
    u_2 <= u_max;
    u_3 <= u_max;
    u_4 <= u_max;
    abs(u_1(1) - u_0(1)) <= S;
    abs(u_2(1) - u_1(1)) <= S;
    abs(u_3(1) - u_2(1)) <= S;
    abs(u_4(1) - u_3(1)) <= S;
cvx_end
vars.u_0 = u_0;
vars.u_1 = u_1;
vars.u{1} = u_1;
vars.u_2 = u_2;
vars.u{2} = u_2;
vars.u_3 = u_3;
vars.u{3} = u_3;
vars.u_4 = u_4;
vars.u{4} = u_4;
vars.x_1 = x_1;
vars.x{1} = x_1;
vars.x_2 = x_2;
vars.x{2} = x_2;
vars.x_3 = x_3;
vars.x{3} = x_3;
vars.x_4 = x_4;
vars.x{4} = x_4;
vars.x_5 = x_5;
vars.x{5} = x_5;
status.cvx_status = cvx_status;
% Provide a drop-in replacement for csolve.
status.optval = cvx_optval;
status.converged = strcmp(cvx_status, 'Solved');
